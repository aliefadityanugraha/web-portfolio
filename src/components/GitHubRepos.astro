---

type Repo = {
  name: string;
  html_url: string;
  description: string | null;
  stargazers_count: number;
  forks_count: number;
  language: string | null;
};

type GitHubNode = {
  name: string;
  url: string;
  description?: string;
  stargazerCount: number;
  forkCount: number;
  primaryLanguage?: {
    name: string;
  };
};

const username = import.meta.env.GITHUB_USERNAME || 'aliefadityanugraha';

async function fetchTopRepos(): Promise<Repo[]> {
  const endpoint = `https://api.github.com/users/${username}/repos?per_page=100&sort=updated`;
  const headers: Record<string, string> = { 'Accept': 'application/vnd.github+json' };
  if (import.meta.env.GITHUB_TOKEN) {
    headers.Authorization = `Bearer ${import.meta.env.GITHUB_TOKEN}`;
  }

  const res = await fetch(endpoint, { headers, cache: 'force-cache' });
  if (!res.ok) return [];
  const data: Repo[] = await res.json();

  // Sort by stars desc and take top 6
  return data
    .filter((r) => !r.name.startsWith('.') && !r.name.includes('archive'))
    .sort((a, b) => b.stargazers_count - a.stargazers_count)
    .slice(0, 6);
}

async function fetchPinnedRepos(): Promise<Repo[]> {
  const token = import.meta.env.GITHUB_TOKEN;
  if (!token) return [];
  const query = `
    query Pinned($login: String!) {
      user(login: $login) {
        pinnedItems(first: 6, types: [REPOSITORY]) {
          nodes {
            ... on Repository {
              name
              url
              description
              stargazerCount
              forkCount
              primaryLanguage { name }
            }
          }
        }
      }
    }
  `;
  const res = await fetch('https://api.github.com/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
    },
    body: JSON.stringify({ query, variables: { login: username } }),
  });
  if (!res.ok) return [];
  const json = await res.json();
  const nodes = json?.data?.user?.pinnedItems?.nodes ?? [];
  return nodes.map((n: GitHubNode) => ({
    name: n.name,
    html_url: n.url,
    description: n.description ?? null,
    stargazers_count: n.stargazerCount ?? 0,
    forks_count: n.forkCount ?? 0,
    language: n.primaryLanguage?.name ?? null,
  })) as Repo[];
}

let repos = await fetchPinnedRepos();
if (repos.length === 0) {
  // Fallback to top-starred if no pinned or token missing
  repos = await fetchTopRepos();
}
---

<section class="w-full">
  <h3 class="scroll-m-20 text-2xl font-semibold tracking-tight">Pinned GitHub Repositories</h3>
  {repos.length > 0 ? (
    <div class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
      {repos.map((repo) => (
        <a href={repo.html_url} class="group border rounded-lg p-4 hover:bg-accent transition" target="_blank" rel="noopener noreferrer">
          <div class="flex items-start justify-between gap-2">
            <h4 class="font-semibold group-hover:underline break-words">{repo.name}</h4>
            <div class="flex items-center gap-3 text-xs text-muted-foreground whitespace-nowrap">
              <span>⭐ {repo.stargazers_count}</span>
              <span>⑂ {repo.forks_count}</span>
            </div>
          </div>
          {repo.description && (
            <p class="mt-1 text-sm text-muted-foreground line-clamp-2">{repo.description}</p>
          )}
          <div class="mt-2 text-xs text-muted-foreground">{repo.language ?? 'Other'}</div>
        </a>
      ))}
    </div>
  ) : (
    <div class="mt-6 text-sm text-muted-foreground border rounded-lg p-4">
      Tidak ada repos yang ditampilkan. Kemungkinan terkena rate limit API GitHub atau username tidak ditemukan.
      Tambahkan token/username pada file .env lalu restart dev server:
      <pre class="mt-2 bg-card p-2 rounded-md overflow-x-auto">GITHUB_TOKEN=ghp_xxx
GITHUB_USERNAME={username}</pre>
    </div>
  )}
</section>


