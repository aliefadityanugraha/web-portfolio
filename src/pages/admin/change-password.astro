---
export const prerender = false;

import LoginLayout from '../../layouts/LoginLayout.astro';
import { requireAuth, getCurrentUser } from '../../utils/adminMiddleware';
import { 
  validatePassword, 
  getUserById, 
  verifyPassword, 
  hashPassword,
  updateUserPassword
} from '../../utils/auth';

// Check authentication
const authRedirect = requireAuth(Astro);
if (authRedirect) {
  return authRedirect;
}

// Get current user
const currentUser = getCurrentUser(Astro);
if (!currentUser) {
  return Astro.redirect('/admin/login');
}

let errorMessage = '';
let successMessage = '';

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const currentPassword = formData.get('currentPassword') as string;
    const newPassword = formData.get('newPassword') as string;
    const confirmPassword = formData.get('confirmPassword') as string;

    // Validate inputs
    if (!currentPassword || !newPassword || !confirmPassword) {
      errorMessage = 'Semua field harus diisi';
    } else if (newPassword !== confirmPassword) {
      errorMessage = 'Password baru dan konfirmasi password tidak cocok';
    } else {
      // Validate new password
      const passwordValidation = validatePassword(newPassword);
      if (!passwordValidation.valid) {
        errorMessage = passwordValidation.error || 'Password baru tidak valid';
      } else {
        // Get user data
        const user = getUserById(currentUser.id);
        if (!user) {
          errorMessage = 'User tidak ditemukan';
        } else {
          // Verify current password
          const isCurrentPasswordValid = await verifyPassword(currentPassword, user.password);
          if (!isCurrentPasswordValid) {
            errorMessage = 'Password saat ini salah';
          } else {
            // Check if new password is different from current
            const isSamePassword = await verifyPassword(newPassword, user.password);
            if (isSamePassword) {
              errorMessage = 'Password baru harus berbeda dari password saat ini';
            } else {
              // Hash new password and update
              const hashedNewPassword = await hashPassword(newPassword);
              console.log('Attempting to update password for user:', currentUser.id);
              const updateResult = updateUserPassword(currentUser.id, hashedNewPassword);
              console.log('Update result:', updateResult);
              
              if (updateResult) {
                console.log('Password updated successfully, redirecting...');
                // Redirect after successful password change
                return Astro.redirect('/admin/dashboard?message=password-changed');
              } else {
                console.error('Failed to update password');
                errorMessage = 'Gagal mengubah password';
              }
            }
          }
        }
      }
    }
  } catch (error) {
    console.error('Change password error:', error);
    errorMessage = 'Terjadi kesalahan saat mengubah password';
  }
}
---

<LoginLayout title="Ubah Password">
  <div class="space-y-8">
    <div>
      <h2 class="text-center text-3xl font-extrabold text-foreground">
        Ubah Password
      </h2>
      <p class="mt-2 text-center text-sm text-muted-foreground">
        Ubah password untuk akun {currentUser.username}
      </p>
    </div>
    
    <form class="mt-8 space-y-6" method="POST">
      <div class="rounded-md shadow-sm space-y-4">
        <div>
          <label for="currentPassword" class="block text-sm font-medium text-foreground mb-2">
            Password Saat Ini
          </label>
          <input
            id="currentPassword"
            name="currentPassword"
            type="password"
            required
            minlength="6"
            maxlength="100"
            class="relative block w-full px-3 py-2 border border-border rounded-md placeholder-muted-foreground text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary focus:z-10 sm:text-sm"
            placeholder="Masukkan password saat ini"
          />
        </div>
        
        <div>
          <label for="newPassword" class="block text-sm font-medium text-foreground mb-2">
            Password Baru
          </label>
          <input
            id="newPassword"
            name="newPassword"
            type="password"
            required
            minlength="6"
            maxlength="100"
            class="relative block w-full px-3 py-2 border border-border rounded-md placeholder-muted-foreground text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary focus:z-10 sm:text-sm"
            placeholder="Masukkan password baru"
          />
          <p class="mt-1 text-xs text-muted-foreground">
            Minimum 6 karakter
          </p>
        </div>
        
        <div>
          <label for="confirmPassword" class="block text-sm font-medium text-foreground mb-2">
            Konfirmasi Password Baru
          </label>
          <input
            id="confirmPassword"
            name="confirmPassword"
            type="password"
            required
            minlength="6"
            maxlength="100"
            class="relative block w-full px-3 py-2 border border-border rounded-md placeholder-muted-foreground text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary focus:z-10 sm:text-sm"
            placeholder="Konfirmasi password baru"
          />
        </div>
      </div>

      {errorMessage && (
        <div class="rounded-md bg-destructive/10 border border-destructive/20 p-4">
          <div class="flex">
            <div class="ml-3">
              <h3 class="text-sm font-medium text-destructive">
                Error
              </h3>
              <div class="mt-2 text-sm text-destructive">
                <p>{errorMessage}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {successMessage && (
        <div class="rounded-md bg-green-50 border border-green-200 p-4">
          <div class="flex">
            <div class="ml-3">
              <h3 class="text-sm font-medium text-green-800">
                Berhasil
              </h3>
              <div class="mt-2 text-sm text-green-700">
                <p>{successMessage}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      <div class="flex space-x-4">
        <button
          type="submit"
          class="flex-1 group relative flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-primary-foreground bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors"
        >
          Ubah Password
        </button>
        
        <a
          href="/admin/dashboard"
          class="flex-1 group relative flex justify-center py-2 px-4 border border-border text-sm font-medium rounded-md text-foreground bg-background hover:bg-muted focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors"
        >
          Batal
        </a>
      </div>
    </form>
  </div>
</LoginLayout>

<script>
  // Client-side form validation
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    const currentPasswordInput = document.getElementById('currentPassword') as HTMLInputElement;
    const newPasswordInput = document.getElementById('newPassword') as HTMLInputElement;
    const confirmPasswordInput = document.getElementById('confirmPassword') as HTMLInputElement;
    
    if (form && currentPasswordInput && newPasswordInput && confirmPasswordInput) {
      form.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Clear previous custom validity
        currentPasswordInput.setCustomValidity('');
        newPasswordInput.setCustomValidity('');
        confirmPasswordInput.setCustomValidity('');
        
        // Validate current password
        const currentPassword = currentPasswordInput.value;
        if (currentPassword.length < 6) {
          currentPasswordInput.setCustomValidity('Password saat ini harus diisi');
          isValid = false;
        }
        
        // Validate new password
        const newPassword = newPasswordInput.value;
        if (newPassword.length < 6) {
          newPasswordInput.setCustomValidity('Password baru minimal 6 karakter');
          isValid = false;
        } else if (newPassword.length > 100) {
          newPasswordInput.setCustomValidity('Password baru terlalu panjang');
          isValid = false;
        }
        
        // Validate confirm password
        const confirmPassword = confirmPasswordInput.value;
        if (confirmPassword !== newPassword) {
          confirmPasswordInput.setCustomValidity('Konfirmasi password tidak cocok');
          isValid = false;
        }
        
        // Check if new password is same as current
        if (newPassword === currentPassword) {
          newPasswordInput.setCustomValidity('Password baru harus berbeda dari password saat ini');
          isValid = false;
        }
        
        if (!isValid) {
          e.preventDefault();
          // Focus on first invalid field
          if (currentPasswordInput.validity.customError) {
            currentPasswordInput.focus();
          } else if (newPasswordInput.validity.customError) {
            newPasswordInput.focus();
          } else if (confirmPasswordInput.validity.customError) {
            confirmPasswordInput.focus();
          }
        }
      });
      
      // Real-time validation feedback
      newPasswordInput.addEventListener('input', function() {
        const newPassword = this.value;
        const currentPassword = currentPasswordInput.value;
        
        if (newPassword.length > 0) {
          if (newPassword.length < 6) {
            this.setCustomValidity('Password baru minimal 6 karakter');
          } else if (newPassword.length > 100) {
            this.setCustomValidity('Password baru terlalu panjang');
          } else if (newPassword === currentPassword) {
            this.setCustomValidity('Password baru harus berbeda dari password saat ini');
          } else {
            this.setCustomValidity('');
          }
        }
        
        // Revalidate confirm password
        const confirmPassword = confirmPasswordInput.value;
        if (confirmPassword && confirmPassword !== newPassword) {
          confirmPasswordInput.setCustomValidity('Konfirmasi password tidak cocok');
        } else {
          confirmPasswordInput.setCustomValidity('');
        }
      });
      
      confirmPasswordInput.addEventListener('input', function() {
        const confirmPassword = this.value;
        const newPassword = newPasswordInput.value;
        
        if (confirmPassword.length > 0) {
          if (confirmPassword !== newPassword) {
            this.setCustomValidity('Konfirmasi password tidak cocok');
          } else {
            this.setCustomValidity('');
          }
        }
      });
    }
  });
</script>