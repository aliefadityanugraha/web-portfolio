---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import { requireAuth, getCurrentUser, logout } from '../../utils/adminMiddleware';
import { getAllUsers, getAllSessions } from '../../utils/auth';
import { getRateLimitStats } from '../../utils/rateLimiter';

// Check authentication
const authRedirect = requireAuth(Astro);
if (authRedirect) {
  return authRedirect;
}

// Handle logout
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const action = formData.get('action');
  
  if (action === 'logout') {
    return logout(Astro);
  }
}

// Get current user
const currentUser = getCurrentUser(Astro);
if (!currentUser) {
  return Astro.redirect('/admin/login');
}

// Check for success messages
const url = new URL(Astro.request.url);
const message = url.searchParams.get('message');
let successMessage = '';
if (message === 'password-changed') {
  successMessage = 'Password berhasil diubah!';
}

// Get system statistics
const users = getAllUsers();
const sessions = getAllSessions();
const rateLimitStats = getRateLimitStats();

// Calculate stats
const totalUsers = users.length;
const activeSessions = sessions.filter(session => {
  const expiresAt = new Date(session.expiresAt);
  return expiresAt > new Date();
}).length;

const blockedIPs = rateLimitStats.filter(stat => stat.blocked).length;
const totalLoginAttempts = rateLimitStats.reduce((sum, stat) => sum + stat.attempts, 0);

// Get recent login attempts (last 10)
const recentAttempts = rateLimitStats
  .sort((a, b) => new Date(b.lastAttempt).getTime() - new Date(a.lastAttempt).getTime())
  .slice(0, 10);
---

<Layout title="Admin Dashboard">
  <div class="min-h-screen bg-background">
    <!-- Header -->
    <header class="bg-card border-b border-border">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
          <div>
            <h1 class="text-2xl font-bold text-foreground">Admin Dashboard</h1>
            <p class="text-muted-foreground">Welcome back, {currentUser.username}</p>
          </div>
          <div class="flex items-center space-x-4">
            <div class="text-sm text-muted-foreground">
              Role: <span class="font-medium text-foreground">{currentUser.role}</span>
            </div>
            <form method="POST" class="inline">
              <input type="hidden" name="action" value="logout" />
              <button
                type="submit"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-destructive-foreground bg-destructive hover:bg-destructive/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-destructive transition-colors"
              >
                Logout
              </button>
            </form>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <!-- Success Message -->
      {successMessage && (
        <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            <p class="text-green-800 font-medium">{successMessage}</p>
          </div>
        </div>
      )}
      
      <!-- Stats Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <!-- Total Users -->
        <div class="bg-card rounded-lg border border-border p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                </svg>
              </div>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-muted-foreground truncate">Total Users</dt>
                <dd class="text-lg font-medium text-foreground">{totalUsers}</dd>
              </dl>
            </div>
          </div>
        </div>

        <!-- Active Sessions -->
        <div class="bg-card rounded-lg border border-border p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-muted-foreground truncate">Active Sessions</dt>
                <dd class="text-lg font-medium text-foreground">{activeSessions}</dd>
              </dl>
            </div>
          </div>
        </div>

        <!-- Blocked IPs -->
        <div class="bg-card rounded-lg border border-border p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728" />
                </svg>
              </div>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-muted-foreground truncate">Blocked IPs</dt>
                <dd class="text-lg font-medium text-foreground">{blockedIPs}</dd>
              </dl>
            </div>
          </div>
        </div>

        <!-- Total Login Attempts -->
        <!-- <div class="bg-card rounded-lg border border-border p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
              </div>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-muted-foreground truncate">Login Attempts</dt>
                <dd class="text-lg font-medium text-foreground">{totalLoginAttempts}</dd>
              </dl>
            </div>
          </div>
        </div> -->
      </div>

      <!-- Recent Activity -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Users List -->
        <div class="bg-card rounded-lg border border-border">
          <div class="px-6 py-4 border-b border-border">
            <h3 class="text-lg font-medium text-foreground">Users</h3>
          </div>
          <div class="p-6">
            {users.length === 0 ? (
              <p class="text-muted-foreground text-center py-4">No users found</p>
            ) : (
              <div class="space-y-4">
                {users.map((user) => (
                  <div class="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
                    <div>
                      <p class="font-medium text-foreground">{user.username}</p>
                      <p class="text-sm text-muted-foreground">Role: {user.role}</p>
                    </div>
                    <div class="text-sm text-muted-foreground">
                      Created: {new Date(user.createdAt).toLocaleDateString()}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        <!-- Recent Login Attempts -->
        <div class="bg-card rounded-lg border border-border">
          <div class="px-6 py-4 border-b border-border">
            <h3 class="text-lg font-medium text-foreground">Recent Login Attempts</h3>
          </div>
          <div class="p-6">
            {recentAttempts.length === 0 ? (
              <p class="text-muted-foreground text-center py-4">No login attempts recorded</p>
            ) : (
              <div class="space-y-4">
                {recentAttempts.map((attempt) => (
                  <div class="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
                    <div>
                      <p class="font-medium text-foreground">{attempt.ip}</p>
                      <p class="text-sm text-muted-foreground">
                        Attempts: {attempt.attempts} | 
                        {attempt.blocked ? (
                          <span class="text-red-600">Blocked</span>
                        ) : (
                          <span class="text-green-600">Active</span>
                        )}
                      </p>
                    </div>
                    <div class="text-sm text-muted-foreground">
                      {new Date(attempt.lastAttempt).toLocaleString()}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="mt-8">
        <div class="bg-card rounded-lg border border-border p-6">
          <h3 class="text-lg font-medium text-foreground mb-4">Quick Actions</h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            <a href="/admin/change-password" class="flex items-center justify-center px-4 py-1 bg-secondary text-secondary-foreground rounded-lg hover:bg-secondary/90 transition-colors">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1721 9z" />
              </svg>
              Change Password
            </a>
            <a href="/admin/articles" class="flex items-center justify-center px-4 py-1 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Kelola Artikel
            </a>
          </div>
        </div>
      </div>
    </main>
  </div>
</Layout>

<script>
  // Auto-refresh dashboard every 30 seconds
  let refreshInterval: NodeJS.Timeout;
  
  function startAutoRefresh() {
    refreshInterval = setInterval(() => {
      // Only refresh if user is still on the page
      if (!document.hidden) {
        window.location.reload();
      }
    }, 30000); // 30 seconds
  }
  
  function stopAutoRefresh() {
    if (refreshInterval) {
      clearInterval(refreshInterval);
    }
  }
  
  // Start auto-refresh when page loads
  document.addEventListener('DOMContentLoaded', startAutoRefresh);
  
  // Stop auto-refresh when page is hidden
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      stopAutoRefresh();
    } else {
      startAutoRefresh();
    }
  });
  
  // Stop auto-refresh before page unloads
  window.addEventListener('beforeunload', stopAutoRefresh);
</script>