---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import { 
  validateUsername, 
  validatePassword, 
  sanitizeInput, 
  getUserByUsername, 
  verifyPassword, 
  generateToken, 
  createSession,
  initializeDefaultUser
} from '../../utils/auth';
import { getClientIP, createRateLimitMiddleware } from '../../utils/rateLimiter';

const rateLimiter = createRateLimitMiddleware();

let errorMessage = '';
let successMessage = '';
let isBlocked = false;
let remainingTime = 0;
let attemptsLeft = 5;

// Initialize default user if needed
await initializeDefaultUser();

if (Astro.request.method === 'POST') {
  try {
    const clientIP = getClientIP(Astro.request);
    
    // Check if IP is blocked
    const blockStatus = rateLimiter.checkRateLimit(clientIP);
    if (blockStatus.blocked) {
      isBlocked = true;
      remainingTime = blockStatus.remainingTime || 0;
      errorMessage = `Too many failed attempts. Please try again in ${remainingTime} minutes.`;
    } else {
      // Parse form data with proper content type handling
      const contentType = Astro.request.headers.get('content-type') || '';
      let rawUsername: string | null = null;
      let rawPassword: string | null = null;
      
      try {
        const formData = await Astro.request.formData();
        rawUsername = formData.get('username') as string;
        rawPassword = formData.get('password') as string;
      } catch (error) {
        // Fallback to text parsing
        const body = await Astro.request.text();
        const params = new URLSearchParams(body);
        rawUsername = params.get('username') || '';
        rawPassword = params.get('password') || '';
      }
      
      // Sanitize inputs - but don't remove valid characters
      const username = (rawUsername || '').trim();
      const password = rawPassword || '';
      
      // Validate inputs
      const usernameValidation = validateUsername(username);
      const passwordValidation = validatePassword(password);
      
      if (!usernameValidation.valid) {
        errorMessage = usernameValidation.error || 'Invalid username';
      } else if (!passwordValidation.valid) {
        errorMessage = passwordValidation.error || 'Invalid password';
      } else {
        // Try to authenticate
        const user = getUserByUsername(username);
        
        if (user && await verifyPassword(password, user.password)) {
          // Successful login
          const token = generateToken(user.id, user.username);
          
          // Create session
          createSession(user.id, token);
          
          // Record successful login
          rateLimiter.recordAttempt(clientIP, true);
          
          // Set secure cookie
          Astro.cookies.set('auth-token', token, {
            httpOnly: true,
            secure: import.meta.env.PROD,
            sameSite: 'strict',
            maxAge: 24 * 60 * 60, // 24 hours
            path: '/'
          });
          
          // Set user info cookie (non-sensitive data)
          Astro.cookies.set('user-info', JSON.stringify({
            username: user.username,
            role: user.role
          }), {
            httpOnly: false,
            secure: import.meta.env.PROD,
            sameSite: 'strict',
            maxAge: 24 * 60 * 60,
            path: '/'
          });
          
          return Astro.redirect('/admin/dashboard');
        } else {
          // Failed login
          const attemptResult = rateLimiter.recordAttempt(clientIP, false);
          
          if (attemptResult.blocked) {
            isBlocked = true;
            const blockedUntil = new Date(attemptResult.blockedUntil!);
            const now = new Date();
            remainingTime = Math.ceil((blockedUntil.getTime() - now.getTime()) / 1000 / 60);
            errorMessage = `Too many failed attempts. Account blocked for ${remainingTime} minutes.`;
          } else {
            attemptsLeft = attemptResult.attemptsLeft || 0;
            errorMessage = `Invalid username or password. ${attemptsLeft} attempts remaining.`;
          }
        }
      }
    }
  } catch (error) {
    console.error('Login error:', error);
    errorMessage = 'An error occurred during login. Please try again.';
  }
} else {
  // GET request - check if already logged in
  const authToken = Astro.cookies.get('auth-token')?.value;
  if (authToken) {
    // User might already be logged in, redirect to dashboard
    return Astro.redirect('/admin/dashboard');
  }
  
  // Get rate limit info for display
  const clientIP = getClientIP(Astro.request);
  const rateLimitInfo = rateLimiter.getInfo(clientIP);
  attemptsLeft = rateLimitInfo.attemptsLeft;
}
---

<Layout title="Admin Login">
  <div class="flex items-center justify-center">
    <div class="max-w-md w-full space-y-8">
      <!-- Header -->
      <div class="text-center">
        <div class="mx-auto h-16 w-16 bg-primary rounded-full flex items-center justify-center mb-6 shadow-lg">
          <svg class="h-8 w-8 text-primary-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
          </svg>
        </div>
        <h1 class="text-3xl font-bold mb-2">Welcome Back</h1>
        <p class="text-muted-foreground">Sign in to access your admin dashboard</p>
      </div>

      <!-- Login Card -->
      <div class="bg-card border rounded-2xl p-8 shadow-lg">
      
          <form class="space-y-6" method="POST">
            <div class="space-y-6">
              <div class="group">
                <label for="username" class="block text-sm font-medium mb-2 transition-colors">
                  <div class="flex items-center space-x-2">
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    <span>Username</span>
                  </div>
                </label>
                <input
                  id="username"
                  name="username"
                  type="text"
                  required
                  maxlength="20"
                  pattern="[a-zA-Z0-9_]+"
                  class="w-full px-4 py-3 bg-background border border-border rounded-xl placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all duration-200"
                  placeholder="Enter your username"
                  disabled={isBlocked}
                />
                <p class="mt-2 text-xs text-muted-foreground">
                  3-20 characters, letters, numbers, and underscores only
                </p>
              </div>
              
              <div class="group">
                <label for="password" class="block text-sm font-medium mb-2 transition-colors">
                  <div class="flex items-center space-x-2">
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                    </svg>
                    <span>Password</span>
                  </div>
                </label>
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  minlength="6"
                  maxlength="100"
                  class="w-full px-4 py-3 bg-background border border-border rounded-xl placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all duration-200"
                  placeholder="Enter your password"
                  disabled={isBlocked}
                />
                <p class="mt-2 text-xs text-muted-foreground">
                  Minimum 6 characters
                </p>
              </div>
            </div>

            {errorMessage && (
              <div class="bg-destructive/10 border border-destructive/20 rounded-xl p-4">
                <div class="flex items-center space-x-3">
                  <svg class="h-5 w-5 text-destructive flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <div>
                    <h3 class="text-sm font-medium text-destructive">
                      Login Failed
                    </h3>
                    <p class="mt-1 text-sm text-destructive/80">{errorMessage}</p>
                  </div>
                </div>
              </div>
            )}

            {successMessage && (
              <div class="bg-green-500/10 border border-green-500/20 rounded-xl p-4">
                <div class="flex items-center space-x-3">
                  <svg class="h-5 w-5 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <div>
                    <h3 class="text-sm font-medium text-green-600">
                      Success
                    </h3>
                    <p class="mt-1 text-sm text-green-600/80">{successMessage}</p>
                  </div>
                </div>
              </div>
            )}

            <div class="flex items-center justify-center">
              <div class="text-sm text-center">
                {!isBlocked && (
                  <span class="text-muted-foreground">
                    Attempts remaining: <span class="font-medium">{attemptsLeft}</span>
                  </span>
                )}
                {isBlocked && (
                  <span class="text-destructive font-medium">
                    🔒 Blocked for {remainingTime} minutes
                  </span>
                )}
              </div>
            </div>

            <button
              type="submit"
              disabled={isBlocked}
              class="w-full bg-primary hover:bg-primary/90 disabled:bg-muted text-primary-foreground disabled:text-muted-foreground font-semibold py-3 px-6 rounded-xl transition-all duration-200 disabled:cursor-not-allowed shadow-lg hover:shadow-xl disabled:opacity-50 flex items-center justify-center space-x-2"
            >
              {isBlocked ? (
                <>
                  <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                  </svg>
                  <span>Account Blocked</span>
                </>
              ) : (
                <>
                  <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
                  </svg>
                  <span>Sign In</span>
                </>
              )}
            </button>
          </form>
        </div>
      </div>
    </main>
  </div>
</Layout>

<style>
  /* Smooth transitions for all interactive elements */
  input, button {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }
</style>

<script>
  // Client-side form validation
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    const usernameInput = document.getElementById('username') as HTMLInputElement;
    const passwordInput = document.getElementById('password') as HTMLInputElement;
    
    if (form && usernameInput && passwordInput) {
      form.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Clear previous custom validity
        usernameInput.setCustomValidity('');
        passwordInput.setCustomValidity('');
        
        // Validate username
        const username = usernameInput.value.trim();
        if (username.length < 3 || username.length > 20) {
          usernameInput.setCustomValidity('Username must be between 3-20 characters');
          isValid = false;
        } else if (!/^[a-zA-Z0-9_]+$/.test(username)) {
          usernameInput.setCustomValidity('Username can only contain letters, numbers, and underscores');
          isValid = false;
        }
        
        // Validate password
        const password = passwordInput.value;
        if (password.length < 6) {
          passwordInput.setCustomValidity('Password must be at least 6 characters long');
          isValid = false;
        } else if (password.length > 100) {
          passwordInput.setCustomValidity('Password is too long');
          isValid = false;
        }
        
        if (!isValid) {
          e.preventDefault();
          // Focus on first invalid field
          if (usernameInput.validity.customError) {
            usernameInput.focus();
          } else if (passwordInput.validity.customError) {
            passwordInput.focus();
          }
        }
      });
      
      // Real-time validation feedback
      usernameInput.addEventListener('input', function() {
        const username = this.value.trim();
        if (username.length > 0) {
          if (username.length < 3 || username.length > 20) {
            this.setCustomValidity('Username must be between 3-20 characters');
          } else if (!/^[a-zA-Z0-9_]+$/.test(username)) {
            this.setCustomValidity('Username can only contain letters, numbers, and underscores');
          } else {
            this.setCustomValidity('');
          }
        }
      });
      
      passwordInput.addEventListener('input', function() {
        const password = this.value;
        if (password.length > 0) {
          if (password.length < 6) {
            this.setCustomValidity('Password must be at least 6 characters long');
          } else if (password.length > 100) {
            this.setCustomValidity('Password is too long');
          } else {
            this.setCustomValidity('');
          }
        }
      });
    }
  });
</script>