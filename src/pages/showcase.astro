---
import Layout from "../layouts/Layout.astro";
import { Separator } from "@/components/ui/separator";
import YoutubeEmbed from "@/components/YoutubeEmbed.astro";
import { BookmarkButton } from "@/components/BookmarkButton";
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

// Auto-load images with paths for deriving titles
type ImageModule = {
  default: ImageMetadata;
};

const localImages = Object.entries(import.meta.glob(
  "../assets/showcase/*.{jpg,jpeg,png,webp,avif,gif,JPG,JPEG,PNG,WEBP,AVIF,GIF}",
  { eager: true }
)) as [string, ImageModule][];

const getTitleFromSrc = (src: string): string => {
  try {
    const url = new URL(src, 'http://local');
    const raw = (url.pathname.split('/').pop() || 'image').replace(/\.[^/.]+$/, '');
    return decodeURIComponent(raw.replace(/[-_]+/g, ' '));
  } catch {
    const clean = src.split('?')[0];
    const raw = (clean.split('/').pop() || 'image').replace(/\.[^/.]+$/, '');
    return decodeURIComponent(raw.replace(/[-_]+/g, ' '));
  }
};
---

<Layout title="Showcase" description="Foto dan video pilihan">
  <section class="flex flex-col gap-4">
    <h1 class="text-3xl sm:text-4xl font-bold tracking-tight">Showcase</h1>
    <p class="text-muted-foreground">Kumpulan foto dan video pilihan.</p>
  </section>

  <Separator />

  <section class="w-full">
    <h3 class="scroll-m-20 text-2xl font-semibold tracking-tight">Foto</h3>
    <div id="grid-container" class="mt-6 grid-layout">
      {localImages.length > 0 ? (
        localImages.map(([, mod], i) => (
          <div class="group relative">
            <button type="button" data-preview="image" data-src={mod.default.src} class="block w-full text-left">
              <div class="skeleton-placeholder">
                 <Image
                   src={mod.default}
                   alt={getTitleFromSrc(mod.default.src)}
                   class="lazy-image w-full object-cover rounded-md border transition-transform duration-300 group-hover:scale-[1.02]"
                   loading="lazy"
                 />
               </div>
            </button>
            <div class="absolute top-2 right-2">
              <BookmarkButton client:load postId={`photo-${i}`} postTitle={getTitleFromSrc(mod.default.src)} postUrl={mod.default.src} hideLabel={true} />
            </div>
          </div>
        ))
      ) : (
        [
          "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee?q=80&w=1200&auto=format&fit=crop"
        ].map((src, i) => (
          <div class="group relative">
            <button type="button" data-preview="image" data-src={src} class="block w-full text-left">
              <div class="skeleton-placeholder">
                 <img
                   data-src={src}
                   alt={getTitleFromSrc(src)}
                   class="lazy-image w-full object-cover rounded-md border transition-transform duration-300 group-hover:scale-[1.02]"
                 />
               </div>
            </button>
            <div class="absolute top-2 right-2">
              <BookmarkButton client:load postId={`photo-${i}`} postTitle={getTitleFromSrc(src)} postUrl={src} hideLabel={true} />
            </div>
          </div>
        ))
      )}
    </div>
  </section>

  <Separator />

  <section class="w-full">
    <h3 class="scroll-m-20 text-2xl font-semibold tracking-tight">Video</h3>
    <div class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-6">
      <div class="relative" data-preview="video" data-youtube-id="dQw4w9WgXcQ">
        <YoutubeEmbed id="dQw4w9WgXcQ" title="Sample Video" />
        <div class="absolute top-2 right-2">
          <BookmarkButton client:load postId={`video-dQw4w9WgXcQ`} postTitle={`Sample Video`} postUrl={`https://www.youtube.com/watch?v=dQw4w9WgXcQ`} hideLabel={true} />
        </div>
      </div>
      <div class="relative" data-preview="video" data-youtube-id="bTqVqk7FSmY">
        <YoutubeEmbed id="bTqVqk7FSmY" title="Nature Timelapse" />
        <div class="absolute top-2 right-2">
          <BookmarkButton client:load postId={`video-bTqVqk7FSmY`} postTitle={`Nature Timelapse`} postUrl={`https://www.youtube.com/watch?v=bTqVqk7FSmY`} hideLabel={true} />
        </div>
      </div>
      
    </div>
  </section>
</Layout>

<div id="lightbox" class="fixed inset-0 z-[60] hidden items-center justify-center bg-black/80 p-4">
  <button id="lightbox-close" aria-label="Close" class="absolute top-4 right-4 rounded-full border px-3 py-1 text-sm bg-background hover:bg-accent transition">Close</button>
  <div id="lightbox-content" class="w-full max-w-5xl aspect-video flex items-center justify-center"></div>
  <style>
    #lightbox.show { display: flex; animation: lbFade 150ms ease-out; }
    @keyframes lbFade { from { opacity: 0 } to { opacity: 1 } }
    
    /* Grid Layout */
    .grid-layout {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }
    
    @media (min-width: 640px) {
      .grid-layout {
        grid-template-columns: repeat(3, 1fr);
      }
    }
    
    @media (min-width: 768px) {
      .grid-layout {
        grid-template-columns: repeat(4, 1fr);
      }
    }
    
    @media (min-width: 1024px) {
      .grid-layout {
        grid-template-columns: repeat(4, 1fr);
      }
    }
    
    .grid-layout > div {
      display: flex;
      flex-direction: column;
    }
    
    .grid-layout img {
      width: 100%;
      height: 200px;
      object-fit: cover;
      border-radius: 0.375rem;
      display: block;
    }
    
    /* Skeleton Placeholder */
    .skeleton-placeholder {
      position: relative;
      overflow: hidden;
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: skeleton-loading 1.5s infinite;
      border-radius: 0.375rem;
    }
    
    /* Grid skeleton placeholder */
    .skeleton-placeholder {
      height: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .skeleton-placeholder.loaded {
      height: auto;
      background: none;
      animation: none;
    }
    
    .dark .skeleton-placeholder {
      background: linear-gradient(90deg, #2a2a2a 25%, #3a3a3a 50%, #2a2a2a 75%);
      background-size: 200% 100%;
    }
    
    @keyframes skeleton-loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }
    
    .lazy-image {
      opacity: 0;
      transition: opacity 0.3s ease-in-out;
    }
    
    .lazy-image.loaded {
      opacity: 1;
    }
    
    .skeleton-placeholder.loaded {
      background: none;
      animation: none;
    }
  </style>
</div>

<script>
  const lb = document.getElementById('lightbox');
  const lbContent = document.getElementById('lightbox-content');
  const lbClose = document.getElementById('lightbox-close');

  // Lazy Loading with Intersection Observer
  function initLazyLoading() {
    const lazyImages = document.querySelectorAll('.lazy-image');
    
    // First, check for already loaded images and remove skeleton
    lazyImages.forEach(img => {
      const placeholder = img.closest('.skeleton-placeholder');
      if (img instanceof HTMLImageElement && img.complete && img.naturalHeight > 0) {
        img.classList.add('loaded');
        placeholder?.classList.add('loaded');
      }
    });
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          const placeholder = img.closest('.skeleton-placeholder');
          
          // Skip if already processed
          if (img.classList.contains('loaded')) {
            observer.unobserve(img);
            return;
          }
          
          // For regular img elements
          if (img.dataset.src) {
            img.src = img.dataset.src;
            img.removeAttribute('data-src');
          }
          
          img.onload = () => {
            img.classList.add('loaded');
            placeholder?.classList.add('loaded');
          };
          
          img.onerror = () => {
            placeholder?.classList.add('loaded');
            console.warn('Failed to load image:', img.src || img.dataset.src);
          };
          
          // For Astro Image components that already have src
          if (img.src && !img.dataset.src) {
            if (img instanceof HTMLImageElement && img.complete && img.naturalHeight > 0) {
              img.classList.add('loaded');
              placeholder?.classList.add('loaded');
            }
          }
          
          observer.unobserve(img);
        }
      });
    }, {
      rootMargin: '50px 0px',
      threshold: 0.01
    });
    
    lazyImages.forEach(img => {
      // Only observe images that aren't already loaded
      if (!img.classList.contains('loaded')) {
        imageObserver.observe(img);
      }
    });
  }

  // Grid Layout Optimization
  function optimizeGrid() {
    const container = document.getElementById('grid-container');
    if (!container) return;
    
    const images = container.querySelectorAll('img');
    
    images.forEach(img => {
      const placeholder = img.closest('.skeleton-placeholder');
      
      // Check if image is already loaded (complete and has natural dimensions)
      if (img instanceof HTMLImageElement && img.complete && img.naturalHeight > 0) {
        img.classList.add('loaded');
        placeholder?.classList.add('loaded');
      } else if (img instanceof HTMLImageElement && !img.complete) {
        // Add load event listener for images that aren't loaded yet
        const handleLoad = () => {
          img.classList.add('loaded');
          placeholder?.classList.add('loaded');
          img.removeEventListener('load', handleLoad);
        };
        
        const handleError = () => {
          placeholder?.classList.add('loaded');
          img.removeEventListener('error', handleError);
          console.warn('Failed to load image:', img.src);
        };
        
        img.addEventListener('load', handleLoad);
        img.addEventListener('error', handleError);
      }
    });
  }

  function openImage(src: string) {
    if (!lb || !lbContent) return;
    lbContent.innerHTML = '';
    const img = document.createElement('img');
    img.src = src;
    img.alt = 'Preview';
    img.className = 'max-h-[80vh] w-auto rounded-md shadow-lg';
    lbContent.appendChild(img);
    lb.classList.add('show');
  }

  function openYouTube(id: string) {
    if (!lb || !lbContent) return;
    lbContent.innerHTML = '';
    const iframe = document.createElement('iframe');
    iframe.width = '100%';
    iframe.height = '100%';
    iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share';
    iframe.allowFullscreen = true;
    iframe.src = `https://www.youtube.com/embed/${id}?autoplay=1&rel=0`;
    lbContent.appendChild(iframe);
    lb.classList.add('show');
  }

  function closeLightbox() {
    if (!lb || !lbContent) return;
    lb.classList.remove('show');
    lbContent.innerHTML = '';
  }

  // Initialize everything
  function init() {
    initLazyLoading();
    optimizeGrid();
  }

  document.addEventListener('click', (e) => {
    const target = e.target;
    if (!(target instanceof Element)) return;
    const imgBtn = target.closest('[data-preview="image"]');
    if (imgBtn && imgBtn instanceof HTMLElement && imgBtn.dataset.src) {
      e.preventDefault();
      openImage(imgBtn.dataset.src);
      return;
    }
    const v = target.closest('[data-preview="video"]');
    if (v && v instanceof HTMLElement && v.dataset.youtubeId) {
      e.preventDefault();
      openYouTube(v.dataset.youtubeId);
    }
  });

  lbClose?.addEventListener('click', closeLightbox);
  lb?.addEventListener('click', (e) => { if (e.target === lb) closeLightbox(); });
  document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeLightbox(); });
  
  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
  
  // Re-initialize when navigating back to this page (for client-side routing)
  document.addEventListener('astro:page-load', init);
  
  // Also handle visibility change (when user switches tabs and comes back)
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      // Small delay to ensure DOM is ready
      setTimeout(init, 100);
    }
  });
  
  // Handle browser back/forward navigation
   window.addEventListener('pageshow', (event) => {
     // Re-initialize if page is loaded from cache
     if (event.persisted) {
       setTimeout(init, 100);
     }
   });
</script>
