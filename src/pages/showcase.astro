---
import Layout from "../layouts/Layout.astro";
import { Separator } from "@/components/ui/separator";
import YoutubeEmbed from "@/components/YoutubeEmbed.astro";
import { BookmarkButton } from "@/components/BookmarkButton";
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

// Auto-load images with paths for deriving titles
type ImageModule = {
  default: ImageMetadata;
};

const localImages = Object.entries(import.meta.glob(
  "../assets/showcase/*.{jpg,jpeg,png,webp,avif,gif,JPG,JPEG,PNG,WEBP,AVIF,GIF}",
  { eager: true }
)) as [string, ImageModule][];

const getTitleFromSrc = (src: string): string => {
  try {
    const url = new URL(src, 'http://local');
    const raw = (url.pathname.split('/').pop() || 'image').replace(/\.[^/.]+$/, '');
    return decodeURIComponent(raw.replace(/[-_]+/g, ' '));
  } catch {
    const clean = src.split('?')[0];
    const raw = (clean.split('/').pop() || 'image').replace(/\.[^/.]+$/, '');
    return decodeURIComponent(raw.replace(/[-_]+/g, ' '));
  }
};
---

<Layout title="Showcase" description="Foto dan video pilihan">
  <section class="flex flex-col gap-4">
    <h1 class="text-3xl sm:text-4xl font-bold tracking-tight">Showcase</h1>
    <p class="text-muted-foreground">Kumpulan foto dan video pilihan.</p>
  </section>

  <section class="w-full">
    <h3 class="scroll-m-20 text-2xl font-semibold tracking-tight">Foto</h3>
    <div id="grid-container" class="mt-6 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-4 gap-4">
      {localImages.length > 0 ? (
        localImages.map(([, mod], i) => (
          <div class="group relative">
            <button type="button" data-preview="image" data-src={mod.default.src} class="block w-full text-left">
              <Image
                src={mod.default}
                alt={getTitleFromSrc(mod.default.src)}
                class="showcase-image w-full h-[200px] object-cover rounded-md border"
                loading="lazy"
              />
            </button>
            <div class="absolute top-2 right-2">
              <BookmarkButton client:load postId={`photo-${i}`} postTitle={getTitleFromSrc(mod.default.src)} postUrl={mod.default.src} hideLabel={true} />
            </div>
          </div>
        ))
      ) : (
        [
          "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee?q=80&w=1200&auto=format&fit=crop"
        ].map((src, i) => (
          <div class="group relative">
            <button type="button" data-preview="image" data-src={src} class="block w-full text-left">
              <img
                src={src}
                alt={getTitleFromSrc(src)}
                class="showcase-image w-full h-[200px] object-cover rounded-md border"
                loading="lazy"
              />
            </button>
            <div class="absolute top-2 right-2">
              <BookmarkButton client:load postId={`photo-${i}`} postTitle={getTitleFromSrc(src)} postUrl={src} hideLabel={true} />
            </div>
          </div>
        ))
      )}
    </div>
  </section>

  <Separator />

  <section class="w-full">
    <h3 class="scroll-m-20 text-2xl font-semibold tracking-tight">Video</h3>
    <div class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-6">
      <div class="relative" data-preview="video" data-youtube-id="dQw4w9WgXcQ">
        <YoutubeEmbed id="dQw4w9WgXcQ" title="Sample Video" />
        <div class="absolute top-2 right-2">
          <BookmarkButton client:load postId={`video-dQw4w9WgXcQ`} postTitle={`Sample Video`} postUrl={`https://www.youtube.com/watch?v=dQw4w9WgXcQ`} hideLabel={true} />
        </div>
      </div>
      <div class="relative" data-preview="video" data-youtube-id="bTqVqk7FSmY">
        <YoutubeEmbed id="bTqVqk7FSmY" title="Nature Timelapse" />
        <div class="absolute top-2 right-2">
          <BookmarkButton client:load postId={`video-bTqVqk7FSmY`} postTitle={`Nature Timelapse`} postUrl={`https://www.youtube.com/watch?v=bTqVqk7FSmY`} hideLabel={true} />
        </div>
      </div>
      
    </div>
  </section>
</Layout>

<div id="lightbox" class="fixed inset-0 z-[60] hidden items-center justify-center bg-black/80 p-4 opacity-0 transition-opacity duration-150 ease-out data-[show]:flex data-[show]:opacity-100 data-[show]:animate-in data-[show]:fade-in">
  <button id="lightbox-close" aria-label="Close" class="absolute top-4 right-4 rounded-full border px-3 py-1 text-sm bg-background hover:bg-accent transition">Close</button>
  <div id="lightbox-content" class="w-full max-w-5xl aspect-video flex items-center justify-center"></div>

</div>

<script>
  const lb = document.getElementById('lightbox');
  const lbContent = document.getElementById('lightbox-content');
  const lbClose = document.getElementById('lightbox-close');

  // Simplified image handling - no lazy loading needed
  function initializeImages() {
    // Just ensure lightbox functionality works
    console.log('Images initialized with native lazy loading');
  }

  function openImage(src: string) {
    if (!lb || !lbContent) return;
    lbContent.innerHTML = '';
    const img = document.createElement('img');
    img.src = src;
    img.alt = 'Preview';
    img.className = 'max-h-[80vh] w-auto rounded-md shadow-lg';
    lbContent.appendChild(img);
    lb.setAttribute('data-show', 'true');
    lb.classList.remove('hidden');
  }

  function openYouTube(id: string) {
    if (!lb || !lbContent) return;
    lbContent.innerHTML = '';
    const iframe = document.createElement('iframe');
    iframe.width = '100%';
    iframe.height = '100%';
    iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share';
    iframe.allowFullscreen = true;
    iframe.src = `https://www.youtube.com/embed/${id}?autoplay=1&rel=0`;
    lbContent.appendChild(iframe);
    lb.setAttribute('data-show', 'true');
    lb.classList.remove('hidden');
  }

  function closeLightbox() {
    if (!lb || !lbContent) return;
    lb.removeAttribute('data-show');
    lb.classList.add('hidden');
    lbContent.innerHTML = '';
  }

  // Initialize everything
  function init() {
    initializeImages();
    
    // Add close button event listener
    if (lbClose) {
      lbClose.addEventListener('click', closeLightbox);
    }
    
    // Close lightbox when clicking outside content
    if (lb) {
      lb.addEventListener('click', (e) => {
        if (e.target === lb) {
          closeLightbox();
        }
      });
    }
    
    // Close lightbox with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeLightbox();
      }
    });
  }

  document.addEventListener('click', (e) => {
    const target = e.target;
    if (!(target instanceof Element)) return;
    const imgBtn = target.closest('[data-preview="image"]');
    if (imgBtn && imgBtn instanceof HTMLElement && imgBtn.dataset.src) {
      e.preventDefault();
      openImage(imgBtn.dataset.src);
      return;
    }
    const v = target.closest('[data-preview="video"]');
    if (v && v instanceof HTMLElement && v.dataset.youtubeId) {
      e.preventDefault();
      openYouTube(v.dataset.youtubeId);
    }
  });
  
  // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', init);
    
    // Fallback for cases where DOMContentLoaded already fired
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  
  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
  
  // Re-initialize when navigating back to this page (for client-side routing)
  document.addEventListener('astro:page-load', init);
  
  // Also handle visibility change (when user switches tabs and comes back)
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      // Small delay to ensure DOM is ready
      setTimeout(init, 100);
    }
  });
  
  // Handle browser back/forward navigation
   window.addEventListener('pageshow', (event) => {
     // Re-initialize if page is loaded from cache
     if (event.persisted) {
       setTimeout(init, 100);
     }
   });
</script>

<style>
  /* Simple image styles */
  .showcase-image {
    transition: transform 0.3s ease;
  }
  
  .showcase-image:hover {
    transform: scale(1.05);
  }
</style>
